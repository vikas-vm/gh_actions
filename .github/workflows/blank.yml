name: Get PR Files

on:
  pull_request:
    types:
      - synchronize
      - opened
      - reopened

jobs:
  get_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Tag Critical PRs
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const criticalFilePathEndsWith = [
              "common/models.py",
              "swiggy.py",
              "zomato.py",
              "talabat.py",
            ];
            const prNumber = context.payload.pull_request.number;
            const resp = await github.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/files', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            let files = resp.data;
            files = files.filter((file) => {
              return criticalFilePathEndsWith.some((filepath) => {
                return file.filename.endsWith(filepath);
              });
            });
            const labels = await github.request('GET /repos/{owner}/{repo}/issues/{issue_number}/labels', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            const isCriticalLabelExists = labels.data.some((label) => {
              return label.name === 'critical';
            });
            if (files.length > 0) {
              if (!isCriticalLabelExists) {
                  await github.request('POST /repos/{owner}/{repo}/issues/{issue_number}/labels', {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    labels: ['critical']
                  });
              }
            } else {
              if (isCriticalLabelExists) {
                  await github.request('DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}', {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    name: 'critical'
                  });
              }
            }
